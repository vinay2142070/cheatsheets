# Redis Cheatsheet
# All the commands you need to know


redis-server /path/redis.conf  # start redis with the related configuration file
redis-cli                      # opens a redis prompt


# Strings.


APPEND key value                  # append a value to a key
BITCOUNT key [start end]          # count set bits in a string
SET key value                     # set value in key
SETNX key value                   # set if not exist value in key
SETRANGE key offset value         # overwrite part of a string at key starting at the specified offset
STRLEN key                        # get the length of the value stored in a key
MSET key value [key value ...]    # set multiple keys to multiple values
MSETNX key value [key value ...]  # set multiple keys to multiple values, only if none of the keys exist
GET key                           # get value in key
GETRANGE key value                # get a substring value of a key and return its old value
MGET key [key ...]                # get the values of all the given keys
INCR key                          # increment value in key
INCRBY key increment              # increment the integer value of a key by the given amount
INCRBYFLOAT key increment         # increment the float value of a key by the given amount
DECR key                          # decrement the integer value of key by one
DECRBY key decrement              # decrement the integer value of a key by the given number
DEL key                           # delete key

EXPIRE key 120                    # key will be deleted in 120 seconds
TTL key                           # returns the number of seconds until a key is deleted


# Lists.
# A list is a series of ordered values.


RPUSH key value [value ...]           # put the new value at the end of the list
RPUSHX key value                      # append a value to a list, only if the exists
LPUSH key value [value ...]           # put the new value at the start of the list
LRANGE key start stop                 # give a subset of the list
LINDEX key index                      # get an element from a list by its index
LINSERT key BEFORE|AFTER pivot value  # insert an element before or after another element in a list
LLEN key                              # return the current length of the list
LPOP key                              # remove the first element from the list and returns it
LSET key index value                  # set the value of an element in a list by its index
LTRIM key start stop                  # trim a list to the specified range
RPOP key                              # remove the last element from the list and returns it
RPOPLPUSH source destination          # remove the last element in a list, prepend it to another list and return it
BLPOP key [key ...] timeout           # remove and get the first element in a list, or block until one is available
BRPOP key [key ...] timeout           # remove and get the last element in a list, or block until one is available


# Sets.
# A set is similar to a list, except it does not have a specific order and each element may only appear once. 


SADD key member [member ...]     # add the given value to the set
SCARD key                        # get the number of members in a set
SREM key member [member ...]     # remove the given value from the set
SISMEMBER myset value            # test if the given value is in the set.
SMEMBERS myset                   # return a list of all the members of this set
SUNION key [key ...]             # combine two or more sets and returns the list of all elements
SINTER key [key ...]             # intersect multiple sets
SMOVE source destination member  # move a member from one set to another
SPOP key [count]                 # remove and return one or multiple random members from a set


# Sorted Sets
# A sorted set is similar to a regular set, but now each value has an associated score.
# This score is used to sort the elements in the set.


ZADD key [NX|XX] [CH] [INCR] score member [score member ...]  # add one or more members to a sorted set, or update its score if it already exists

ZCARD key                           # get the number of members in a sorted set
ZCOUNT key min max                  # count the members in a sorted set with scores within the given values
ZINCRBY key increment member        # increment the score of a member in a sorted set
ZRANGE key start stop [WITHSCORES]  # returns a subset of the sorted set
ZRANK key member                    # determine the index of a member in a sorted set
ZREM key member [member ...]        # remove one or more members from a sorted set
ZREMRANGEBYRANK key start stop      # remove all members in a sorted set within the given indexes
ZREMRANGEBYSCORE key min max        # remove all members in a sorted set, by index, with scores ordered from high to low
ZSCORE key member                   # get the score associated with the given mmeber in a sorted set

ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]  # return a range of members in a sorted set, by score


# Hashes
# Hashes are maps between string fields and string values, so they are the perfect data type to represent objects.


HGET key field          # get the value of a hash field
HGETALL key             # get all the fields and values in a hash
HSET key field value    # set the string value of a hash field
HSETNX key field value  # set the string value of a hash field, only if the field does not exists

HMSET key field value [field value ...]  # set multiple fields at once

HINCRBY key field increment  # increment value in hash by X
HDEL key field [field ...]   # delete one or more hash fields
HEXISTS key field            # determine if a hash field exists
HKEYS key                    # get all the fields in a hash
HLEN key                     # get all the fields in a hash
HSTRLEN key field            # get the length of the value of a hash field
HVALS key                    # get all the values in a hash


# HyperLogLog
# HyperLogLog uses randomization in order to provide an approximation of the number of unique elements in a set using just a constant, and small, amount of memory


PFADD key element [element ...]  # add the specified elements to the specified HyperLogLog
PFCOUNT key [key ...]            # return the approximated cardinality of the set(s) observed by the HyperLogLog at key's)

PFMERGE destkey sourcekey [sourcekey ...]  # merge N HyperLogLogs into a single one


# Publication & Subscription


PSUBSCRIBE pattern [pattern ...]             # listen for messages published to channels matching the given patterns
PUBSUB subcommand [argument [argument ...]]  # inspect the state of the Pub/Sub subsystem
PUBLISH channel message                      # post a message to a channel
PUNSUBSCRIBE [pattern [pattern ...]]         # stop listening for messages posted to channels matching the given patterns
SUBSCRIBE channel [channel ...]              # listen for messages published to the given channels
UNSUBSCRIBE [channel [channel ...]]          # stop listening for messages posted to the given channels


# Other Commands


KEYS pattern  # find all keys matching the given pattern


Redis commands cheatsheet from https://lzone.de/cheat-sheet/Redis---------------------------------------------------------------------------------------------------------------


Redis Cheat SheetEdit Cheat Sheet
When you encounter a Redis instance and you quickly want to learn about the setup you just need a few simple commands to peak into the setup. Of course it doesn’t hurt to look at the official full command documentation, but below is a listing just for sysadmins.

Accessing Redis
CLI
First thing to know is that you can use “telnet” (usually on Redis default port 6379)

telnet localhost 6379
or the Redis CLI client

redis-cli
to connect to Redis. The advantage of redis-cli is that you have a help interface and command line history.

CLI QUERIES
Here is a short list of some basic data extraction commands:

Type	Syntax and Explanation
Tracing	monitor Watch current live commands. Use with care when on production. Cancel with Ctrl-C.
Slow Queries	slowlog get 25 Print top 25 slow queries
 	slowlog len
 	slowlog reset
Search / List All Keys	keys <pattern Use with care when on production!
 	keys myprefix*
 	keys *pattern*
 	keys *mysuffix
 	keys [a-c]* Use grep like expressions
Generic Key Handling	del <key> Delete key
 	dump <key> Serialize key
 	exists <key> Check for key
 	expire <key> <seconds> Set key TTL
Working with scalar types	get <key>
 	set <key> <value>
 	setnx <key> <value> Set key value only if key does not exist
 	Batch commands:
 	mget <key> <key> ...
 	mset <key> <value> <key> <value>
Working with counters	incr <key>
 	decr <key>
Redis Lists	lrange <key> <start> <stop> Accessing lists
 	lrange mylist 0 -1 Output all elements
 	lindex mylist 5 Get 5th element
 	llen mylist Get list length
 	 
 	lpush mylist "value" Push “value” to list
 	lpush mylist 5 Push number 5 to list
 	rpush mylist "value" Push “value” to beginning (unshift)
 	 
 	lpushx mylist 6 Only push if mylist exists
 	rpushx mylist 7
 	 
 	lpop mylist Remove+return value from list
 	rpop mylist Remove+return value from start (shift)
 	 
 	lrem mylist 1 "value" Remove ‘value’ count times
 	lset mylist 2 6 Set 3rd element to value 6
 	ltrim <key> <start> <stop>
Working with Redis Hashes	hexists myhash field1 Check if hash key exists
 	 
 	hget myhash field1 Get key value
 	hdel myhash field2 Delete key
 	hset myhash field1 "value" Set key with “value”
 	hsetnx myhash field1 "value"
 	 
 	hgetall myhash Get all hash content
 	hkeys myhash List all keys
 	hlen myhash List number of keys
 	 
 	Batch commands:
 	hmget <key> <key> ... Get multiple keys
 	hmset <key> <value> <key> <value> ... Set multiple keys
 	 
 	Counter commands
 	hincrby myhash field1 1
 	hincrby myhash field1 5
 	hincrby myhash field1 -1
 	 
 	hincrbrfloat myhash field2 1.123445
CLI SCRIPTING
For scripting just pass commands to “redis-cli”. For example:

$ redis-cli INFO | grep connected
connected_clients:2
connected_slaves:0
$
SERVER STATISTICS
The statistics command is “INFO” and will give you an output as following.

$ redis-cli INFO
redis_version:2.2.12
redis_git_sha1:00000000
redis_git_dirty:0
arch_bits:64
multiplexing_api:epoll
process_id:8353
uptime_in_seconds:2592232
uptime_in_days:30
lru_clock:809325
used_cpu_sys:199.20
used_cpu_user:309.26
used_cpu_sys_children:12.04
used_cpu_user_children:1.47
connected_clients:2         # <---- connection count
connected_slaves:0
client_longest_output_list:0
client_biggest_input_buf:0
blocked_clients:0
used_memory:6596112
used_memory_human:6.29M         # <---- memory usage
used_memory_rss:17571840
mem_fragmentation_ratio:2.66
use_tcmalloc:0
loading:0
aof_enabled:0
changes_since_last_save:0
bgsave_in_progress:0
last_save_time:1371241671
bgrewriteaof_in_progress:0
total_connections_received:118
total_commands_processed:1091
expired_keys:441
evicted_keys:0
keyspace_hits:6
keyspace_misses:1070
hash_max_zipmap_entries:512
hash_max_zipmap_value:64
pubsub_channels:0
pubsub_patterns:0
vm_enabled:0
role:master             # <---- master/slave in replication setup
db0:keys=91,expires=88
Changing Runtime Configuration
The command

CONFIG GET *
gives you a list of all active configuration variables you can change. The output might look like this:

redis 127.0.0.1:6379> CONFIG GET *
 1) "dir"
 2) "/var/lib/redis"
 3) "dbfilename"
 4) "dump.rdb"
 5) "requirepass"
 6) (nil)
 7) "masterauth"
 8) (nil)
 9) "maxmemory"
10) "0"
11) "maxmemory-policy"
12) "volatile-lru"
13) "maxmemory-samples"
14) "3"
15) "timeout"
16) "300"
17) "appendonly"
18) "no"
19) "no-appendfsync-on-rewrite"
20) "no"
21) "appendfsync"
22) "everysec"              # <---- how often fsync() is called
23) "save"
24) "900 1 300 10 60 10000"     # <---- how often Redis dumps in background
25) "slave-serve-stale-data"
26) "yes"
27) "hash-max-zipmap-entries"
28) "512"
29) "hash-max-zipmap-value"
30) "64"
31) "list-max-ziplist-entries"
32) "512"
33) "list-max-ziplist-value"
34) "64"
35) "set-max-intset-entries"
36) "512"
37) "slowlog-log-slower-than"
38) "10000"
39) "slowlog-max-len"
40) "64"

 
Note that keys and values are alternating and you can change each key by issuing a “CONFIG SET” command like:

CONFIG SET timeout 900
Such a change will be effective instantly. When changing values consider also updating the redis configuration file.

Databases
MULTIPLE DATABASES
Redis has a concept of separated namespaces called “databases”. You can select the database number you want to use with “SELECT”. By default the database with index 0 is used. So issuing

redis 127.0.0.1:6379> SELECT 1
OK
redis 127.0.0.1:6379[1]>

 
switches to the second database. Note how the prompt changed and now has a “[1]” to indicate the database selection. To find out how many databases there are you might want to run redis-cli from the shell:

$ redis-cli INFO | grep ^db
db0:keys=91,expires=88
db1:keys=1,expires=0
DROPPING DATABASES
To drop the currently selected database run

FLUSHDB
to drop all databases at once run

FLUSHALL
Replication
CHECKING FOR REPLICATION
To see if the instance is a replication slave or master issue

redis 127.0.0.1:6379> INFO
[...]
role:master
and watch for the “role” line which shows either “master” or “slave”. Starting with version 2.8 the “INFO” command also gives you per slave replication status looking like this

slave0:ip=127.0.0.1,port=6380,state=online,offset=281,lag=0
SETTING UP REPLICATION
If you quickly need to set up replication just issue

SLAVEOF <IP> <port>
on a machine that you want to become slave of the given IP. It will immediately get values from the master. Note that this instance will still be writable. If you want it to be read-only change the redis config file (only available in most recent version, e.g. not on Debian). To revert the slave setting run

SLAVEOF NO ONE
Performance Testing
BENCHMARK
Install the Redis tools and run the provided benchmarking tool

redis-benchmark -h <host> [-p <port>]
If you are migrating from/to memcached protocol check out how to run the same benchmark for any key value store with memcached protocol.

DEBUGGING LATENCY
First measure system latency on your Redis server with

redis-cli --intrinsic-latency 100
and then sample from your Redis clients with

redis-cli --latency -h <host> -p <port>
If you have problems with high latency check if transparent huge pages are disabled. Disable it with

echo never > /sys/kernel/mm/transparent_hugepage/enabled
Dump Database Backup
As Redis allows RDB database dumps in background, you can issue a dump at any time. Just run:

BGSAVE
When running this command Redis will fork and the new process will dump into the “dbfilename” configured in the Redis configuration without the original process being blocked. Of course the fork itself might cause an interruption. Use “LASTSAVE” to check when the dump file was last updated. For a simple backup solution just backup the dump file. If you need a synchronous save run “SAVE” instead of “BGSAVE”.

Listing Connections
Starting with version 2.4 you can list connections with

CLIENT LIST
and you can terminate connections with

CLIENT KILL <IP>:<port>
Monitoring Traffic
The propably most useful command compared to memcached where you need to trace network traffic is the “MONITOR” command which will dump incoming commands in real time.

redis 127.0.0.1:6379> MONITOR
OK
1371241093.375324 "monitor"
1371241109.735725 "keys" "*"
1371241152.344504 "set" "testkey" "1"
1371241165.169184 "get" "testkey"

 
additionally use “SLOWLOG” to track the slowest queries in an interval. For example

SLOWLOG RESET
# wait for some time
SLOWLOG GET 25
and get the 25 slowest command during this time.

Sharding with proxies
There are two major proxy solutions

Twemproxy (aka nutcracker, by Twitter)
Codis
